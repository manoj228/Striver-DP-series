C++ Solution:

Recursion + memoization:

#include <bits/stdc++.h> 

int f(int i, int j1, int j2, int r, int c, vector<vector<int>> &grid, vector<vector<vector<int>>> &dp)
{
    if(j1 < 0 || j1 >= c || j2 < 0 || j2 >= c)
        return -1e9;
    
    if(i == r-1)
    {
        if(j1 == j2)
            return grid[i][j1];
        
        return grid[i][j1] + grid[i][j2];
    }
    
    if(dp[i][j1][j2] != -1)
        return dp[i][j1][j2];
    
    int maxi = -1e9;
    
    for(int x = -1; x <= 1; x++)
    {
        for(int y = -1; y <= 1; y++)
        {
            int val = 0;
            
            if(j1 == j2)
                val += grid[i][j1];
            
            else
                val += grid[i][j1] + grid[i][j2];
            
            val += f(i+1, j1+x, j2+y, r, c, grid, dp);
            
            maxi = max(maxi, val);
        }
    }
    
    return dp[i][j1][j2] = maxi;
}

int maximumChocolates(int r, int c, vector<vector<int>> &grid) {
 
   vector<vector<vector<int>>> dp(r, vector<vector<int>>(c, vector<int>(c, -1)));
    
    return f(0, 0, c-1, r, c, grid, dp);
}


Iterative solution:
TC: O(N*M*M)
SC: O(N*M*M)

for(int j1 = 0; j1 < c; j1++)
    {
        for(int j2 = 0; j2 < c; j2++)
        {
            if(j1 == j2)
                dp[r-1][j1][j2] = grid[r-1][j1];
        
            else
                dp[r-1][j1][j2] = grid[r-1][j1] + grid[r-1][j2];
        }
    }
    
    for(int i = r-2; i >= 0; i--)
    {
        for(int j1 = 0; j1 < c; j1++)
        {
            for(int j2 = 0; j2 < c; j2++)
            {
                int maxi = -1e9;
    
                for(int x = -1; x <= 1; x++)
                {
                    for(int y = -1; y <= 1; y++)
                    {
                        int val = 0;

                        if(j1 == j2)
                            val += grid[i][j1];

                        else  
                            val += grid[i][j1] + grid[i][j2];

                        if(j1+x >= 0 && j1+x < c && j2+y >= 0 && j2+y < c)
                            val += dp[i+1][j1+x][j2+y];
                        
                        else
                            val += -1e8;

                        maxi = max(maxi, val);
                    }
                }

                dp[i][j1][j2] = maxi;
            }
        }
    }
    
    return dp[0][0][c-1];
    
    
    
 Space optimized approach:
 
 TC: O(N*M*M)
 SC: O(M*M)
 
 int f(int i, int j1, int j2, int r, int c, vector<vector<int>> &grid, vector<vector<vector<int>>>& dp)
{
    // out of bound case
    if(j1 < 0 || j1 >= c || j2 < 0 || j2 >= c)
        return -1e8;
    
    // destination base case
    if(i == r-1)
    {
        // both meet at common point
        if(j1 == j2)
            return grid[i][j1];  // add once
        
        else
            return grid[i][j1] + grid[i][j2];  // add twice
    }
    
    if(dp[i][j1][j2] != -1)
        return dp[i][j1][j2];
    
    int maxi = -1e8;
    // we have 3 x 3 = 9 combinations
    for(int dj1 = -1; dj1 <= 1; dj1++)
    {
        for(int dj2 = -1; dj2 <= 1; dj2++)
        {
            int val = 0;
            
            if(j1 == j2)
                val = grid[i][j1];
            
            else
               val = grid[i][j1] + grid[i][j2];
            
            val += f(i+1, j1+dj1, j2+dj2, r, c, grid, dp);
            
            maxi = max(maxi, val);
        }
    }
    
    return dp[i][j1][j2] = maxi;
    
}

int maximumChocolates(int r, int c, vector<vector<int>> &grid) {
    
    vector<vector<int>> front(c, vector<int>(c, 0)), cur(c, vector<int>(c, 0));
    
    // base case
    for(int j1 = 0; j1 < c; j1++)
    {
        for(int j2 = 0; j2 < c; j2++)
        {
            if(j1 == j2)
            	front[j1][j2] = grid[r-1][j1];
            
            else
                front[j1][j2] = grid[r-1][j1] + grid[r-1][j2];
        }
    }
    
    // express every state in for loop
    for(int i = r-2; i >= 0; i--)
    {
        for(int j1 = 0; j1 < c; j1++)
        {
            for(int j2 = 0; j2 < c; j2++)
            {
                int maxi = -1e8;
                // we have 3 x 3 = 9 combinations
                for(int dj1 = -1; dj1 <= 1; dj1++)
                {
                    for(int dj2 = -1; dj2 <= 1; dj2++)
                    {
                        int val = 0;

                        if(j1 == j2)
                            val = grid[i][j1];

                        else
                           val = grid[i][j1] + grid[i][j2];

                        if(j1+dj1 >= 0 && j1+dj1 < c && j2+dj2 >= 0 && j2+dj2 < c)
                        	val += front[j1+dj1][j2+dj2];
                        else
                            val += -1e8;

                        maxi = max(maxi, val);
                    }
                }

                cur[j1][j2] = maxi;
            }
        }
        
        front = cur;
    }
    
  
    return front[0][c-1];
}
