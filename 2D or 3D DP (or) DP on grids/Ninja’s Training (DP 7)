C++ Solution:

Recursive + memoization and Iterative solution:


TC: O(N * 4 * 3)
SC: O(N * 4)

#include<bits/stdc++.h>

int f(int day, int last, vector<vector<int>> &points, vector<vector<int>> &dp)
{
    if(day == 0)
    {
        int maxi = 0;
        for(int i = 0; i < 3; i++)
        {
            if(i != last)
                maxi = max(maxi, points[0][i]);
        }
        
        return maxi;
    }
    
    if(dp[day][last] != -1)
        return dp[day][last];
    
    int maxi = INT_MIN;
    for(int i = 0; i < 3; i++)
    {
        if(i != last)
        {
            maxi = max(maxi, points[day][i] + f(day-1, i, points, dp));
        }
    }
    
    return dp[day][last] = maxi;
}

int ninjaTraining(int n, vector<vector<int>> &points)
{
    vector<vector<int>> dp(n, vector<int>(4, 0));
    
    dp[0][0] = max(points[0][1], points[0][2]);
    dp[0][1] = max(points[0][0], points[0][2]);
    dp[0][2] = max(points[0][0], points[0][1]);
    dp[0][3] = max(points[0][0], max(points[0][1], points[0][2]));
    
    for(int day = 1; day < n; day++)
    {
        for(int last = 0; last < 4; last++)
        {
            int maxi = INT_MIN;
            for(int i = 0; i < 3; i++)
            {
                if(i != last)
                {
                    maxi = max(maxi, points[day][i] + dp[day-1][i]);
                }
            }

            dp[day][last] = maxi;
        }
    }
    
    return dp[n-1][3];
}



Optimized solution:

TC : O(N * 4 * 3)
SC : O(4)
#include<bits/stdc++.h>

int ninjaTraining(int n, vector<vector<int>> &points)
{
    vector<int> prev(4, 0);
    
    prev[0] = max(points[0][1], points[0][2]);
    prev[1] = max(points[0][0], points[0][2]);
    prev[2] = max(points[0][0], points[0][1]);
    prev[3] = max(points[0][0], max(points[0][1], points[0][2]));
    
    for(int day = 1; day < n; day++)
    {
        vector<int> cur(4, 0);
        for(int last = 0; last < 4; last++)
        {
            int maxi = INT_MIN;
            for(int i = 0; i < 3; i++)
            {
                if(i != last)
                {
                    maxi = max(maxi, points[day][i] + prev[i]);
                }
            }

            cur[last] = maxi;
        }
        
        prev = cur;
    }
    
    return prev[3];
}



Java Solution:

public class Solution {
    public static int ninjaTraining(int n, int points[][]) {

        int prev[] = new int[4];
    
    prev[0] = Math.max(points[0][1], points[0][2]);
    prev[1] = Math.max(points[0][0], points[0][2]);
    prev[2] = Math.max(points[0][0], points[0][1]);
    prev[3] = Math.max(points[0][0], Math.max(points[0][1], points[0][2]));
    
    for(int day = 1; day < n; day++)
    {
        int cur[] = new int[4];
        for(int last = 0; last < 4; last++)
        {
            int maxi = Integer.MIN_VALUE;
            for(int i = 0; i < 3; i++)
            {
                if(i != last)
                {
                    maxi = Math.max(maxi, points[day][i] + prev[i]);
                }
            }

            cur[last] = maxi;
        }
        
        prev = cur;
    }
    
    return prev[3];
    }

}

