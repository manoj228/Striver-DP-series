(Fixed Starting and Ending point)

https://www.codingninjas.com/codestudio/problems/minimum-path-sum_985349

C++ Solution:
Recursion + memoization:

#include <bits/stdc++.h> 

int f(int i, int j, vector<vector<int>> &grid,vector<vector<int>>& dp)
{
    if(i < 0 || j < 0)
        return 1e9;
    
    if(i == 0 && j == 0)
        return grid[i][j];
    
    if(dp[i][j] != -1)
        return dp[i][j];
    
    int up = grid[i][j] + f(i-1, j, grid, dp);
    int left = grid[i][j] + f(i, j-1, grid, dp);
    
    return dp[i][j] = min(up, left);
}

int minSumPath(vector<vector<int>> &grid) {
    
    int n = grid.size(), m = grid[0].size();
    
    vector<vector<int>> dp(n+1, vector<int>(m+1, -1));
    
    return f(n-1, m-1, grid, dp);
}


Iterative solution:
TC : O(N*M)
SC: O(N*M)
#include <bits/stdc++.h> 

int minSumPath(vector<vector<int>> &grid) {
    
    int n = grid.size(), m = grid[0].size();
    
    vector<vector<int>> dp(n+1, vector<int>(m+1, 0));
    
    for(int i = 0; i < n; i++)
    {
        for(int j = 0; j < m; j++)
        {
            if(i == 0 && j == 0)
                dp[i][j] = grid[i][j];
            else{
                int up = 1e9, left = 1e9;
                
                if(i-1 >= 0) up = grid[i][j] + dp[i-1][j];
                if(j-1 >= 0) left = grid[i][j] + dp[i][j-1];

                dp[i][j] = min(up, left);
            }
        }
    }
    
    return dp[n-1][m-1];
}


Space optimized approach:
TC : O(N*M)
SC: O(N)

#include <bits/stdc++.h> 

int minSumPath(vector<vector<int>> &grid) {
    
    int n = grid.size(), m = grid[0].size();
    
    vector<int> cur(m+1, 0), prev(m+1, 0);
    
    for(int i = 0; i < n; i++)
    {
        for(int j = 0; j < m; j++)
        {
            if(i == 0 && j == 0)
                cur[j] = grid[i][j];
            else{
                int up = 1e9, left = 1e9;
                
                if(i-1 >= 0) up = grid[i][j] + prev[j];
                if(j-1 >= 0) left = grid[i][j] + cur[j-1];

                cur[j] = min(up, left);
            }
        }
        
        prev = cur;
    }
    
    return prev[m-1];
}


Java:
import java.util.* ;
import java.io.*; 
public class Solution {
    public static int minSumPath(int[][] grid) {
    	int n = grid.length, m = grid[0].length;
    
        int cur[] = new int[m+1];
        int prev[] = new int[m+1];

        for(int i = 0; i < n; i++)
        {
            for(int j = 0; j < m; j++)
            {
                if(i == 0 && j == 0)
                    cur[j] = grid[i][j];
                else{
                    int up =(int)1e9, left = (int) 1e9;

                    if(i-1 >= 0) up = grid[i][j] + prev[j];
                    if(j-1 >= 0) left = grid[i][j] + cur[j-1];

                    cur[j] = Math.min(up, left);
                }
            }

            prev = cur;
        }

        return prev[m-1];
    }
}
