C++ Solution:


int mod = (int)(1e9 + 7);

int f(int i, int j, vector<vector<int>> &mat,vector<vector<int>> &dp)
{
    if(i >= 0 && j >= 0 && mat[i][j] == -1)
        return 0;
    
    if(i == 0 && j == 0)
        return 1;
    
    if(i < 0 || j < 0)
        return 0;
    
    if(dp[i][j] != -1)
        return dp[i][j];
    
    int up = f(i-1, j, mat, dp);
    int left = f(i, j-1, mat, dp);
    
    return dp[i][j] = up + left;
}


int mazeObstacles(int n, int m, vector< vector< int> > &mat) {
    
    vector<vector<int>> dp(n, vector<int>(m, 0));
    
    for(int i = 0; i < n; i++)
    {
        for(int j = 0; j < m; j++)
        {
            if(mat[i][j] == -1)
                dp[i][j] = 0;
            
            else if(i == 0 && j == 0)
                dp[i][j] = 1;
            
            else{
                int up = 0;
                if(i-1 >= 0) up = dp[i-1][j];
                int left = 0;
                if(j - 1>=0) left = dp[i][j-1];
    
                dp[i][j] = (up + left)% mod;
            }
        }
    }
    
    return dp[n-1][m-1];
}



Java Solution:
import java.util.*;
public class Solution {
    static int mazeObstacles(int n, int m, ArrayList<ArrayList<Integer>> mat) {
           
        int[][] dp = new int[n][m];
        int mod = (int) (1e9 + 7);
        
            for(int i = 0; i < n; i++)
            {
                for(int j = 0; j < m; j++)
                {
                    if(mat.get(i).get(j) == -1)
                        dp[i][j] = 0;

                    else if(i == 0 && j == 0)
                        dp[i][j] = 1;

                    else{
                        int up = 0;
                        if(i-1 >= 0) up = dp[i-1][j];
                        int left = 0;
                        if(j - 1>=0) left = dp[i][j-1];

                        dp[i][j] = (up + left)% mod;
                    }
                }
            }
    
        return dp[n-1][m-1];
    }

}
