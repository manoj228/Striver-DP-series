C++ Solution:

TC : O(m*n)
SC : O(m*n)

Recursive + memo & Iterative solution:

#include <bits/stdc++.h> 

int mod = (int)(1e9 + 7);

int f(int i, int j, vector<vector<int>> &dp)
{    
    if(i == 0 && j == 0)
        return 1;
    
    if(i < 0 || j < 0)
        return 0;
    
    if(dp[i][j] != -1)
        return dp[i][j];
    
    int up = f(i-1, j, dp);
    int left = f(i, j-1, dp);
    
    return dp[i][j] = up + left;
}

int uniquePaths(int m, int n) {
	
    vector<vector<int>> dp(m, vector<int>(n, 0));
    
    for(int i = 0; i < m; i++)
    {
        for(int j = 0; j < n; j++)
        {
            if(i == 0 && j == 0)
                dp[i][j] = 1;
            
            else{
                int up = 0, left = 0;
                if(i-1 >= 0) up = dp[i-1][j];
                if(j-1 >= 0) left = dp[i][j-1];
                
                dp[i][j] = up + left;
            }
        }
    }
    
    return dp[m-1][n-1];
}


Optimized approach (Both C++ & Java):

TC : O(N)
SC : O(1)

#include <bits/stdc++.h> 

int uniquePaths(int m, int n) {
	
    int N = m-1 + n-1;
    int r = m-1;
    
    int res = 1;
    
    for(int i = 1; i<=r; i++)
    {
        res = res * (N - r + i) / i;
    }
    
    return res;
}
