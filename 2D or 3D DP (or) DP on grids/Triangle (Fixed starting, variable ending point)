https://www.codingninjas.com/codestudio/problems/triangle_1229398

C++ Solution:

Recursion + memoization:

#include <bits/stdc++.h> 

int f(int i, int j, int n, vector<vector<int>> &triangle, vector<vector<int>> &dp)
{
    if(i == n-1)
        return triangle[i][j];
   
    if(dp[i][j] != -1)
        return dp[i][j];
    
    int down = triangle[i][j] + f(i+1, j, n, triangle, dp);
    int diag = triangle[i][j] + f(i+1, j+1, n, triangle, dp);
    
    return dp[i][j] = min(down, diag);
}


int minimumPathSum(vector<vector<int>>& triangle, int n){
	// Write your code here.
    
    vector<vector<int>> dp(n+1, vector<int>(n+1, -1));
    
    return f(0, 0, n, triangle, dp);
}

Iterative Solution:

TC: O(N*N)
SCL: O(N*N)

#include <bits/stdc++.h> 

int f(int i, int j, int n, vector<vector<int>> &triangle, vector<vector<int>> &dp)
{
    if(i == n-1)
        return triangle[i][j];
   
    if(dp[i][j] != -1)
        return dp[i][j];
    
    int down = triangle[i][j] + f(i+1, j, n, triangle, dp);
    int diag = triangle[i][j] + f(i+1, j+1, n, triangle, dp);
    
    return dp[i][j] = min(down, diag);
}


int minimumPathSum(vector<vector<int>>& triangle, int n){
    
    vector<vector<int>> dp(n+1, vector<int>(n+1, 0));
    
    for(int j = 0; j < n; j++)
        dp[n-1][j] = triangle[n-1][j];
    
    for(int i = n-2; i >= 0; i--)
    {
        for(int j = 0; j < n; j++)
        {
            int down = triangle[i][j] + dp[i+1][j];
            int diag = triangle[i][j] + dp[i+1][j+1];

            dp[i][j] = min(down, diag);
        }
    }
    
    
    return dp[0][0];
}



Space optimized approach:

TC: O(N*N)
SC: O(N)

#include <bits/stdc++.h>

int minimumPathSum(vector<vector<int>>& triangle, int n){
    
    vector<int> ahead(n+1, 0), cur(n+1, 0);
    
    for(int j = 0; j < n; j++)
        ahead[j] = triangle[n-1][j];
    
    for(int i = n-2; i >= 0; i--)
    {
        for(int j = 0; j < n; j++)
        {
            int down = triangle[i][j] + ahead[j];
            int diag = triangle[i][j] + ahead[j+1];

            cur[j] = min(down, diag);
        }
        
        ahead = cur;
    }
    
    
    return ahead[0];
}

Java:

import java.util.* ;
import java.io.*; 
public class Solution {
    public static int minimumPathSum(int[][] triangle, int n) {
        
        int[] ahead = new int[n+1];
        int[] cur = new int[n+1];
    
        for(int j = 0; j < n; j++)
            ahead[j] = triangle[n-1][j];

        for(int i = n-2; i >= 0; i--)
        {
            for(int j = 0; j < n; j++)
            {
                int down = triangle[i][j] + ahead[j];
                int diag = triangle[i][j] + ahead[j+1];

                cur[j] = min(down, diag);
            }

            ahead = cur;
        }


        return ahead[0];
    }
}
