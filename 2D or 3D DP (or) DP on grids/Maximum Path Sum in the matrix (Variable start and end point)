https://www.codingninjas.com/codestudio/problems/maximum-path-sum-in-the-matrix_797998

C++ Solution:

Recursion + memoization:

#include <bits/stdc++.h> 

int f(int i, int j, int m, vector<vector<int>> &matrix,vector<vector<int>> &dp)
{
     if(j < 0 || j >= m)
        return -1e9;
    
     if(i == 0)
        return matrix[i][j];
    
    if(dp[i][j] != -1)
        return dp[i][j];
   
    int up = matrix[i][j] + f(i-1, j, m, matrix, dp);
    int topLeft = matrix[i][j]  + f(i-1, j-1, m, matrix, dp);
    int topRight = matrix[i][j] + f(i-1, j+1, m, matrix, dp);
    
    return dp[i][j] = max(up, max(topLeft, topRight));
}

int getMaxPathSum(vector<vector<int>> &matrix)
{
    int n = matrix.size();
    int m = matrix[0].size();
    
    int maxi = -1e9;
    
    vector<vector<int>> dp(n+1, vector<int>(m+1, -1));
    
    for(int j = 0; j < m; j++)
    {
        maxi = max(maxi, f(n-1, j, m, matrix, dp));
    }

    return maxi;
}


Iterative Solution:
TC: O(N*M)
SC: O(N*M)

#include <bits/stdc++.h> 

int getMaxPathSum(vector<vector<int>> &matrix)
{
    int n = matrix.size();
    int m = matrix[0].size();
    
    int maxi = -1e9;
    
    vector<vector<int>> dp(n+1, vector<int>(m+1, 0));
    
    for(int j = 0; j < m; j++)
        dp[0][j] = matrix[0][j];
    
    for(int i = 1; i < n; i++)
    {
        for(int j = 0; j < m; j++)
        {
            int up = matrix[i][j] + dp[i-1][j];
            int topLeft = -1e9;
            
            if(j-1 >= 0) 
                topLeft = matrix[i][j]  + dp[i-1][j-1];
            
            int topRight = -1e9;
            if(j+1 < m)
            topRight = matrix[i][j] + dp[i-1][j+1];

            dp[i][j] = max(up, max(topLeft, topRight));
        }
    }
    
    for(int j = 0; j < m; j++)
    {
        maxi = max(maxi, dp[n-1][j]);
    }

    return maxi;
}

Space Optimized approach:

TC: O(N*M)
SC: O(M)

#include <bits/stdc++.h> 

int getMaxPathSum(vector<vector<int>> &matrix)
{
    int n = matrix.size();
    int m = matrix[0].size();
    
    int maxi = -1e9;
    
    vector<int> prev(m+1, 0), cur(m+1, 0);
    
    for(int j = 0; j < m; j++)
        prev[j] = matrix[0][j];
    
    for(int i = 1; i < n; i++)
    {
        for(int j = 0; j < m; j++)
        {
            int up = matrix[i][j] + prev[j];
            int topLeft = -1e9;
            
            if(j-1 >= 0) 
                topLeft = matrix[i][j]  + prev[j-1];
            
            int topRight = -1e9;
            if(j+1 < m)
            topRight = matrix[i][j] + prev[j+1];

            cur[j] = max(up, max(topLeft, topRight));
        }
        
        prev = cur;
    }
    
    for(int j = 0; j < m; j++)
    {
        maxi = max(maxi, prev[j]);
    }

    return maxi;
}



