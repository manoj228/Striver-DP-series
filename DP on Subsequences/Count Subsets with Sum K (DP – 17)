Problem link:  https://www.codingninjas.com/codestudio/problems/number-of-subsets_3952532?source=youtube&campaign=striver_dp_videos&utm_source=youtube&utm_medium=affiliate&utm_campaign=striver_dp_videos&leftPanelTab=0



C++ Solution:

TC: O(N*tar)
SC: O(tar)

#include <bits/stdc++.h> 

int f(int idx, vector<int> &nums, int goal, vector<vector<int>> &dp)
{
    if(idx == 0)
    {
        if(goal == 0 && nums[idx] == 0)
            return 2;
        
        if(goal == 0 || nums[idx] == goal)
            return 1;
        
        return 0;
    }
    
    if(dp[idx][goal] != -1)
        return dp[idx][goal];
    
    int notPick = f(idx - 1, nums, goal, dp);
    int pick = 0;
    if(nums[idx] <= goal)
        pick = f(idx - 1, nums, goal - nums[idx], dp);
    
    return dp[idx][goal] = pick + notPick;
}

int findWays(vector<int> &nums, int tar)
{
    int n = nums.size();
    
    vector<int> prev(tar+1, 0), cur(tar+1, 0);
    
    prev[0] = 1;
   
    if(nums[0] <= tar)
        prev[nums[0]] = 1;
    
    for(int idx = 1; idx < n; idx++)
    {
        cur[0] = 1;
        for(int goal = 0; goal <= tar; goal++)
        {
            int notPick = prev[goal];
            int pick = 0;
            if(nums[idx] <= goal)
                pick = prev[goal - nums[idx]];

            cur[goal] = pick + notPick;
        }
        
        prev = cur;
    }
    
    return prev[tar];
}
