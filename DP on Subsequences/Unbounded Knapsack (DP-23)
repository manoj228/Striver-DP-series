Problem Link: https://www.codingninjas.com/codestudio/problems/unbounded-knapsack_1215029


int f(int ind, int W, vector<int> &val, vector<int> &wt,vector<vector<int>>& dp)
{
    if(ind == 0)
    {
      return (W / wt[0]) * val[0];
    }
    
    if(dp[ind][W] != -1)
        return dp[ind][W];
    
    int notTake = f(ind - 1, W, val, wt, dp);
    int take = -1e8;
    if(wt[ind] <= W)
        take = val[ind] + f(ind, W - wt[ind], val, wt, dp);
    
    return dp[ind][W] = max(notTake, take);
}

int unboundedKnapsack(int n, int w, vector<int> &val, vector<int> &wt)
{
    vector<int> prev(w+1, 0), cur(w+1, 0);
    
    for(int W = 0; W <= w; W++)
        prev[W] = (W / wt[0]) * val[0];
    
    for(int ind = 1; ind < n; ind++)
    {
        for(int W = 0; W <= w; W++)
        {
            int notTake = prev[W];
            int take = -1e8;
            if(wt[ind] <= W)
                take = val[ind] + prev[W - wt[ind]];

            prev[W] = max(notTake, take);
        }
        
    }
    
    return prev[w];
}
