problem link : https://leetcode.com/problems/target-sum/

C++
TC: O(N*target)
SC: O(target)
class Solution {
private:
    int findWays(vector<int> &nums, int tar)
    {
        int n = nums.size();

        vector<int> prev(tar+1, 0);

        if(nums[0] == 0)
            prev[0] = 2;
        else
            prev[0] = 1;

         if(nums[0] != 0 && nums[0]<=tar) 
             prev[nums[0]] = 1;  
        
        for(int idx = 1; idx < n; idx++)
        {
            vector<int> cur(tar+1, 0);
            
            for(int goal = 0; goal <= tar; goal++)
            {
                int notPick = prev[goal];
                int pick = 0;
                
                if(nums[idx] <= goal)
                    pick = prev[goal - nums[idx]];

                cur[goal] = pick + notPick;
            }

            prev = cur;
        }

        return prev[tar];
    }
    
public:
    int findTargetSumWays(vector<int>& nums, int target) {
        
        int totSum = 0;
        
        for(auto &num : nums)
            totSum += num;
        
        /*
        1) s1 + s2 = target
        2) s1 = totSum - s2
        3) totSum - s2 - s2 = target
        4) s2 = (totSum - target) / 2
        */
        
        if(totSum - target <0 || (totSum-target) & 1) 
            return 0;
        
        return findWays(nums, (totSum - target) / 2);
    }
};
