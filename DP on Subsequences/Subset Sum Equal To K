problem Link: https://www.codingninjas.com/codestudio/problems/subset-sum-equal-to-k_1550954?leftPanelTab=0


Recursive + memoization and Iterative:
TC: O(N*K)
SC: O(N*K)   [O(N*k) + O(N) -> recursive stack ]
#include <bits/stdc++.h> 

bool f(int idx, int k, vector<int> &arr,vector<vector<int>> &dp)
{
    if(k == 0)
        return true;
    
    if(idx == 0)
        return (arr[idx] == k);
    
    if(dp[idx][k] != -1)
        return dp[idx][k];
    
    bool notPick = f(idx - 1, k, arr, dp);
    bool pick = false;
    
    if(k >= arr[idx])
        pick = f(idx - 1, k - arr[idx], arr, dp);
    
    return dp[idx][k] = pick || notPick;
}

bool subsetSumToK(int n, int k, vector<int> &arr) {
    // Write your code here.
    vector<vector<int>> dp(n, vector<int>(k+1, 0));
    
    for(int i = 0; i < n; i++)
        dp[i][0] = 1;
    
    if(arr[0] <= k) dp[0][arr[0]] = 1;
    
    for(int idx = 1; idx < n; idx++)
    {
        for(int tar = 1; tar <= k; tar++)
        {
            bool notPick = dp[idx-1][tar];
            bool pick = false;

            if(tar >= arr[idx])
                pick = dp[idx - 1][tar - arr[idx]];

            dp[idx][tar] = pick || notPick;
        }
    }
    
    return dp[n-1][k];
}



Space Optimized approach:

TC: O(N*K)
SC: O(K)

#include <bits/stdc++.h> 

bool subsetSumToK(int n, int k, vector<int> &arr) {
    // Write your code here.
    vector<int> prev(k+1, 0), cur(k+1, 0);
    
    prev[0] = cur[0] = 1;
    
    if(arr[0] <= k) prev[arr[0]] = 1;
    
    for(int idx = 1; idx < n; idx++)
    {
        for(int tar = 1; tar <= k; tar++)
        {
            bool notPick = prev[tar];
            bool pick = false;

            if(tar >= arr[idx])
                pick = prev[tar - arr[idx]];

            cur[tar] = pick || notPick;
        }
        prev = cur;
    }
    
    return prev[k];
}
