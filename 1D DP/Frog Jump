C++ Solution:

Recursion + memoization and Iterative DP approach:
TC : O(n)
SC : O(n)
#include<bits/stdc++.h>

int f(int ind, vector<int> &heights, vector<int> &dp)
{
    if(ind == 0) return 0;
    
    if(dp[ind] != -1)
        return dp[ind];
    
    int step1 = abs(heights[ind] - heights[ind-1]) + f(ind - 1, heights, dp);
    int step2 = INT_MAX;
    
    if(ind > 1) 
        step2 = abs(heights[ind] - heights[ind-2]) + f(ind - 2, heights, dp);
    
    
    return dp[ind] = min(step1, step2);
}

int frogJump(int n, vector<int> &heights)
{
    vector<int> dp(n+1, 0);
    dp[0] = 0;
    
    for(int ind = 1; ind < n; ind++)
    {
        int step1 = abs(heights[ind] - heights[ind-1]) + dp[ind - 1];
        int step2 = INT_MAX;

        if(ind > 1) 
            step2 = abs(heights[ind] - heights[ind-2]) + dp[ind - 2];
    
    
        dp[ind] = min(step1, step2);
    }
    
    return dp[n-1];
}

Most Optimized Approach:
TC : O(n)
SC : O(1)

int frogJump(int n, vector<int> &heights)
{
    int prev = 0, prev2 = 0, cur = 0;
    
    for(int ind = 1; ind < n; ind++)
    {
        int step1 = abs(heights[ind] - heights[ind-1]) + prev;

        int step2 = INT_MAX;
        if(ind > 1) 
            step2 = abs(heights[ind] - heights[ind-2]) + prev2;
    
    
        cur = min(step1, step2);
        
        prev2 = prev;
        prev = cur;
    }
    
    return prev;
}


Java:
Recursion + memoization and Iterative DP approach:
TC : O(n)
SC : O(n)

import java.util.Arrays;
public class Solution {
    private static int f(int ind, int heights[], int[] dp)
    {
        if(ind == 0) return 0;
        
        if(dp[ind] != -1)
            return dp[ind];
        
        int step1 = Math.abs(heights[ind] - heights[ind-1]) + f(ind-1, heights, dp);
        int step2 = Integer.MAX_VALUE;
        
        if(ind > 1)
            step2= Math.abs(heights[ind] - heights[ind-2]) + f(ind-2, heights, dp);
             
        return dp[ind] = Math.min(step1, step2);
    }
    
    public static int frogJump(int n, int heights[]) {
        
        int[] dp = new int[n+1];
        
        dp[0] = 0;
        
        for(int ind = 1; ind < n; ind++)
        {
            int step1 = Math.abs(heights[ind] - heights[ind-1]) + dp[ind-1];
            int step2 = Integer.MAX_VALUE;

            if(ind > 1)
                step2= Math.abs(heights[ind] - heights[ind-2]) + dp[ind-2];

            dp[ind] = Math.min(step1, step2);
        }
        
        return dp[n-1];
    }

}

Optimized Approach:

import java.util.Arrays;
public class Solution {    
    public static int frogJump(int n, int heights[]) {
        
        int prev = 0, prev2 = 0, cur = 0;
        
        for(int ind = 1; ind < n; ind++)
        {
            int step1 = Math.abs(heights[ind] - heights[ind-1]) + prev;
            int step2 = Integer.MAX_VALUE;

            if(ind > 1)
                step2= Math.abs(heights[ind] - heights[ind-2]) + prev2;

            cur = Math.min(step1, step2);
            
            prev2 = prev;
            prev = cur;
        }
        
        return prev;
    }

}
