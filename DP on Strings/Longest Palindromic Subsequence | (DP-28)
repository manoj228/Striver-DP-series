Problem link: https://leetcode.com/problems/longest-palindromic-subsequence/


Palindrome Subsequence = lcs(str, rev(str))

C++ Solution:

Iterative Solution:

TC: O(M*N)
SC: O(M*N)

class Solution {
private:
    int lcs(string &text1, string &text2)
    {
        int m = text1.size(), n = text2.size();
        
        vector<vector<int>> dp(m+1, vector<int>(n+1, 0));
        
        for(int i = 1; i <= m; i++)
        {
            for(int j = 1; j <= n; j++)
            {
                if(text1[i-1] == text2[j-1])
                    dp[i][j] = 1 + dp[i-1][j-1];
                
                else
                    dp[i][j] = max(dp[i-1][j], dp[i][j-1]);
            }
        }
        
        return dp[m][n];
    }
    
public:
    int longestPalindromeSubseq(string s) {
        
        string revStr = s;
        
        reverse(revStr.begin(), revStr.end());
        
        return lcs(s, revStr);
    }
};


Space optimized solution:

TC: O(M*N)
SC: O(N)

class Solution {
private:
    int lcs(string &text1, string &text2)
    {
        int m = text1.size(), n = text2.size();
        
        vector<int> prev(n+1, 0), cur(n+1, 0);
        
        for(int i = 1; i <= m; i++)
        {
            for(int j = 1; j <= n; j++)
            {
                if(text1[i-1] == text2[j-1])
                    cur[j] = 1 + prev[j-1];
                
                else
                    cur[j] = max(prev[j], cur[j-1]);
            }
            
            prev = cur;
        }
        
        return prev[n];
    }
    
public:
    int longestPalindromeSubseq(string s) {
        
        string revStr = s;
        
        reverse(revStr.begin(), revStr.end());
        
        return lcs(s, revStr);
    }
};
