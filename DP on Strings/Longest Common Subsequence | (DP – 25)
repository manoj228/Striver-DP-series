Problem link: https://leetcode.com/problems/longest-common-subsequence/

C++ Solution:

Recursive + Memoization & Iterative:

TC: O(M*N)
SC: O(M*N)

class Solution {
private:
    int f(int i, int j, string &text1, string &text2,vector<vector<int>> &dp)
    {
        if(i == 0 || j == 0)
            return 0;
        
        if(dp[i][j] != -1)
            return dp[i][j];
        
        if(text1[i-1] == text2[j-1])
            return 1 + f(i-1, j-1, text1, text2, dp);
        
        int moveI = f(i-1, j, text1, text2, dp);
        int moveJ = f(i, j-1, text1, text2, dp);
        
        return dp[i][j] = max(moveI, moveJ);
    }
    
public:
    int longestCommonSubsequence(string text1, string text2) {
        int m = text1.size(), n = text2.size();
        
        vector<vector<int>> dp(m+1, vector<int>(n+1, 0));
        
        for(int i = 1; i <= m; i++)
        {
            for(int j = 1; j <= n; j++)
            {                
                if(text1[i-1] == text2[j-1])
                    dp[i][j] = 1 + dp[i-1][j-1];

                else{
                    int moveI = dp[i-1][j];
                    int moveJ = dp[i][j-1];

                    dp[i][j] = max(moveI, moveJ);
                }
                
            }
        }
        
        return dp[m][n];
    }
};


Space Optimized Solution:

TC: O(M*N)
SC: O(N)

class Solution {   
public:
    int longestCommonSubsequence(string text1, string text2) {
        int m = text1.size(), n = text2.size();
        
        vector<int> prev(n+1, 0), cur(n+1, 0);
        
        for(int i = 1; i <= m; i++)
        {
            for(int j = 1; j <= n; j++)
            {                
                if(text1[i-1] == text2[j-1])
                    cur[j] = 1 + prev[j-1];

                else{
                    int moveI = prev[j];
                    int moveJ = cur[j-1];

                    cur[j] = max(moveI, moveJ);
                }
                
            }
            
            prev = cur;
        }
        
        return prev[n];
    }
};
