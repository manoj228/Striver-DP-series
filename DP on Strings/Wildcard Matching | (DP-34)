Problem link: https://leetcode.com/problems/wildcard-matching/

C++ Solution:

Recursive + Memoization & Iterative Solution:
TC: O(N*M)
SC: O(N*M)

class Solution {
private:
    bool f(int i, int j, string &s, string &p, vector<vector<int>> &dp)
    {
        // if both reached end
        if(i == 0 && j == 0)
            return true;
        
        // return false, when s is remaining and p reached end
        if(j == 0 && i > 0)
            return false;
        
        // check '*' present in pattern to match any char in s
        if(i == 0 && j > 0)
        {
            for(int k = 1; k <= j; k++)
            {
                if(p[k-1] != '*')
                    return false;
            }
            
            return true;
        }
        
        if(dp[i][j] != -1)
            return dp[i][j];
        
        // char matches / '?' found
        if(s[i-1] == p[j-1] || p[j-1] == '?')
            return f(i-1, j-1, s, p, dp);
        
        
        if(p[j-1] == '*')
        {
            bool consider = f(i-1, j, s, p, dp);
            bool notConsider = f(i, j-1, s, p, dp);
            
            return dp[i][j] = consider || notConsider;
        }
        
        return dp[i][j] = false;
    }
    
public:
    bool isMatch(string s, string p) {
        
        int m = s.size(), n = p.size();
        
        vector<vector<int>> dp(m+1, vector<int>(n+1, 0));
        
        dp[0][0] = true;
        
        for(int i = 1; i <= m; i++)
            dp[i][0] = false;
        
         for(int j = 1; j <= n; j++)
         {
             bool flag = true;
            for(int k = 1; k <= j; k++)
            {
                if(p[k-1] != '*')
                {
                    flag = false;
                    break;
                }
                    
            }
            
            dp[0][j] = flag;
        }
        
        for(int i = 1; i <= m; i++)
        {
            for(int j = 1; j <= n; j++)
            {
                // char matches / '?' found
                if(s[i-1] == p[j-1] || p[j-1] == '?')
                    dp[i][j] = dp[i-1][j-1];


                else if(p[j-1] == '*')
                {
                    bool consider = dp[i-1][j];
                    bool notConsider = dp[i][j-1];

                    dp[i][j] = consider || notConsider;
                }

                else
                    dp[i][j] = false;
            }
        }
        
        
        return dp[m][n];
    }
};


Space optimized Approach:
TC: O(N*M)
SC: O(M)
class Solution {    
public:
    bool isMatch(string s, string p) {
        
        int m = s.size(), n = p.size();
        
        vector<int> prev(n+1, 0), cur(n+1, 0);
        
        prev[0] = cur[0] = true;
        
        for(int i = 1; i <= m; i++)
            cur[0] = false;
        
         for(int j = 1; j <= n; j++)
         {
             bool flag = true;
            for(int k = 1; k <= j; k++)
            {
                if(p[k-1] != '*')
                {
                    flag = false;
                    break;
                }
                    
            }
            
            prev[j] = flag;
        }
        
        for(int i = 1; i <= m; i++)
        {
            for(int j = 1; j <= n; j++)
            {
                // char matches / '?' found
                if(s[i-1] == p[j-1] || p[j-1] == '?')
                    cur[j] = prev[j-1];


                else if(p[j-1] == '*')
                {
                    bool consider = prev[j];
                    bool notConsider = cur[j-1];

                    cur[j] = consider || notConsider;
                }

                else
                    cur[j] = false;
            }
            
            prev = cur;
        }
        
        
        return prev[n];
    }
};
