problem link: https://leetcode.com/problems/distinct-subsequences/

C++ solution:

Recursive + memo & Iterative:

TC: O(M*N)
SC: O(M*N)


class Solution {   
private:
    int f(int i, int j, string &s, string &t, vector<vector<int>> &dp)
    {
        // reached destination
        if(j == 0)
            return 1;
        
        if(i == 0)
            return 0;
        
        if(dp[i][j] != -1)
            return dp[i][j];
        
        if(s[i-1] == t[j-1])
        {
            int leave = f(i-1, j-1, s, t, dp);
            int notLeave = f(i-1, j, s, t, dp);
            
            return dp[i][j] = leave + notLeave;
        }
        
        return dp[i][j] = f(i-1, j, s, t, dp);
    }
    
public:
    int numDistinct(string s, string t) {
        int m = s.size(), n = t.size();
        
        int mod = 1e9 + 7;
        
        vector<vector<int>> dp(m+1, vector<int>(n+1, 0));
        
        for(int i = 0; i <= m; i++)
            dp[i][0] = 1;
        
        for(int j = 1; j <= n; j++)
            dp[0][j] = 0;
        
        for(int i = 1; i <= m; i++)
        {
            for(int j = 1; j <= n; j++)
            {
                if(s[i-1] == t[j-1])
                {
                    int leave = dp[i-1][j-1];
                    int notLeave = dp[i-1][j];

                    dp[i][j] = (leave + notLeave) % mod;
                }
                else
                    dp[i][j] = dp[i-1][j];
            }
        }
        
        return dp[m][n];
    }
};


Space optimized:
TC: O(M*N)
SC: O(N)

class Solution {   
public:
    int numDistinct(string s, string t) {
        int m = s.size(), n = t.size();
        
        int mod = 1e9 + 7;
        
        vector<int> prev(n+1, 0);
        
        prev[0] = 1;      
        
        for(int i = 1; i <= m; i++)
        {
            for(int j = n; j >= 1; j--)
            {
                if(s[i-1] == t[j-1])
                {
                    int leave =  prev[j-1];
                    int notLeave = prev[j];

                    prev[j] = (leave + notLeave) % mod;
                }
                else
                    prev[j] = prev[j];
            }
        }
        
        return prev[n];
    }
};
