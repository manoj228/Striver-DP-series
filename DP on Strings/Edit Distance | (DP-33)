Problem link: https://leetcode.com/problems/edit-distance/


C++ Solution:

Recursive + Memoization and Iterative

TC: O(M*N)
SC: O(M*N)

class Solution {
private:
    int f(int i, int j, string &word1, string &word2, vector<vector<int>> &dp)
    {
        if(i == 0)
            return j;
        
        if(j == 0)
            return i;
        
        if(dp[i][j] != -1)
            return dp[i][j];
        
        if(word1[i-1] == word2[j-1])
            return dp[i][j] = f(i-1, j-1, word1, word2, dp);
        
        else{
            int insert = f(i, j-1, word1, word2, dp);
            int remove = f(i-1, j, word1, word2, dp);
            int replace = f(i-1, j-1, word1, word2, dp);
            
            return dp[i][j] = 1 + min(insert, min(remove, replace));
        }
    }
    
public:
    int minDistance(string word1, string word2) {
        
        int m = word1.size(), n = word2.size();
        
        vector<vector<int>> dp(m+1, vector<int>(n+1, -1));
        
        for(int i = 0; i <= m; i++)
            dp[i][0] = i;
        
        for(int j = 0; j <= n; j++)
            dp[0][j] = j;
        
        
        for(int i = 1; i <= m; i++)
        {
            for(int j = 1; j <= n; j++)
            {
                if(word1[i-1] == word2[j-1])
                    dp[i][j] = dp[i-1][j-1];
        
                else{
                    int insert = dp[i][j-1];
                    int remove = dp[i-1][j];
                    int replace = dp[i-1][j-1];

                    dp[i][j] = 1 + min(insert, min(remove, replace));
                }
            }
        }
        
        return dp[m][n];
    }
};

Space optimized approach:

TC: O(M*N)
SC: O(N)

class Solution {
public:
    int minDistance(string word1, string word2) {
        
        int m = word1.size(), n = word2.size();
        
        vector<int> prev(n+1, 0), cur(n+1, 0);
        
        for(int j = 0; j <= n; j++)
            prev[j] = j;
        
        
        for(int i = 1; i <= m; i++)
        {
            cur[0] = i;
            for(int j = 1; j <= n; j++)
            {
                if(word1[i-1] == word2[j-1])
                    cur[j] = prev[j-1];
        
                else{
                    int insert = cur[j-1];
                    int remove = prev[j];
                    int replace = prev[j-1];

                    cur[j] = 1 + min(insert, min(remove, replace));
                }
            }
            prev = cur;
        }
        
        return prev[n];
    }
};
