Problem link: https://leetcode.com/problems/longest-common-subsequence/

C++ Solution:

TC: O(M*N)
SC: O(M*N)

class Solution {   
public:
    int longestCommonSubsequence(string text1, string text2) {
        
        int m = text1.size(), n = text2.size();
        
        vector<vector<int>> dp(m+1, vector<int>(n+1, 0));
        
        for(int i = 1; i <= m; i++)
        {
            for(int j = 1; j <= n; j++)
            {                
                if(text1[i-1] == text2[j-1])
                    dp[i][j] = 1 + dp[i-1][j-1];

                else{
                    int moveI = dp[i-1][j];
                    int moveJ = dp[i][j-1];

                    dp[i][j] = max(moveI, moveJ);
                }
                
            }
        }
        
        string str = "";
        for(int i = 1; i <= dp[m][n]; i++)
            str += '$';
        
        int index = dp[m][n] - 1, i = m, j = n;
        
        while(i > 0 && j > 0)
        {
            if(text1[i-1] == text2[j-1])
            {
                str[index--] = text1[i-1];
                i--, j--;
            }
            
            else if(text1[i-1] > text2[j-1])
            {
                i--;
            }
            
            else{
                j--;
            }
        }
        
        cout << str << endl ;
        
        return dp[m][n];
    }
};
